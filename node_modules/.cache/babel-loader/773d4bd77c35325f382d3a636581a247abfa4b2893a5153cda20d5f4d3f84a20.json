{"ast":null,"code":"var _jsxFileName = \"/home/wwan-ab-/Desktop/AmbankHack/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport Sidenav from './Components/Sidenav/Sidenav';\nimport PartnerDetails from './Components/Partner/PartnerDetails';\nimport AddPartner from './Components/Partner/AddPartner';\nimport LoadingOverlay from './Components/Common/LoadingOverlay';\nimport Review from './Components/Review/Review';\nimport AuditLog from './Components/AuditLog/AuditLog';\nimport './App.css';\n\n// Define your backend API base URL\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:5000/api';\nfunction App() {\n  _s();\n  //Partners state - will be fetched from backend\n  const [partners, setPartners] = useState([]);\n  const [selectedPartnerId, setSelectedPartnerId] = useState(null);\n  const [isAddPartnerModalOpen, setIsAddPartnerModalOpen] = useState(false);\n\n  //Loading Screen Indicator\n  const [isAnalyzing, setIsAnalyzing] = useState(false); // For file upload/anonymization process\n  const [loadingPartners, setLoadingPartners] = useState(true); // For initial partners fetch\n  const [error, setError] = useState(null); // For general fetch errors\n\n  // Human Review\n  const [isReviewModalOpen, setIsReviewModalOpen] = useState(false);\n  const [reviewData, setReviewData] = useState(null); // Detected PII for review\n  const [currentFileBeingReviewed, setCurrentFileBeingReviewed] = useState(null); // The file object currently in review\n\n  // Audit\n  const [isAuditLogModalOpen, setIsAuditLogModalOpen] = useState(false);\n  const [auditLogData, setAuditLogData] = useState(null); // Audit log data for display\n\n  // Helper function to determine file type based on extension (still useful for sending to backend)\n  const getFileTypeFromExtension = filename => {\n    const ext = filename.split('.').pop().toLowerCase();\n    if (['txt'].includes(ext)) {\n      return 'Text file';\n    } else if (['jpg', 'jpeg', 'png', 'bmp'].includes(ext)) {\n      return 'Image file';\n    } else if (['csv', 'xlsx', 'xlsm', 'xls'].includes(ext)) {\n      return 'Tabular file';\n    } else if (['doc', 'docx', 'pdf'].includes(ext)) {\n      return 'Document file';\n    }\n    return 'Unknown file';\n  };\n\n  // Function to fetch partners from the backend\n  const fetchPartners = useCallback(async () => {\n    setLoadingPartners(true);\n    setError(null);\n    try {\n      const response = await fetch(`${API_BASE_URL}/partners`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setPartners(data);\n      // If no partner is selected, and there are partners, select the first one\n      if (!selectedPartnerId && data.length > 0) {\n        setSelectedPartnerId(data[0].id);\n      } else if (selectedPartnerId && !data.some(p => p.id === selectedPartnerId)) {\n        // If previously selected partner was removed, clear selection or select new first\n        setSelectedPartnerId(data.length > 0 ? data[0].id : null);\n      }\n    } catch (err) {\n      console.error(\"Failed to fetch partners:\", err);\n      setError(\"Failed to load partners. Please ensure the backend is running and accessible.\");\n    } finally {\n      setLoadingPartners(false);\n    }\n  }, [selectedPartnerId]); // Dependency on selectedPartnerId to re-fetch if it changes outside this component\n\n  // Initial data fetch on component mount\n  useEffect(() => {\n    fetchPartners();\n  }, [fetchPartners]); // `fetchPartners` is in dependency array because it's a useCallback\n\n  const selectedPartner = partners.find(p => p.id === selectedPartnerId);\n\n  // Handle adding a new partner via backend API\n  const handleAddPartner = async newPartnerData => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/partners`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newPartnerData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n      }\n      const addedPartner = await response.json();\n      await fetchPartners(); // Re-fetch all partners to update UI\n      setIsAddPartnerModalOpen(false);\n      setSelectedPartnerId(addedPartner.id); // Select the newly added partner\n      alert(`Partner \"${addedPartner.name}\" added successfully!`);\n    } catch (err) {\n      console.error(\"Failed to add partner:\", err);\n      alert(`Error adding partner: ${err.message}`);\n    }\n  };\n\n  // Handle file upload and initial PII analysis via backend API\n  const handleFileUpload = async filesToUpload => {\n    if (!selectedPartner) return;\n    setIsAnalyzing(true); // Show analyzing overlay\n\n    // For simplicity, we'll only process the first file if multiple are selected.\n    // In a real app, you might iterate or queue them.\n    const file = filesToUpload[0];\n    const fileType = getFileTypeFromExtension(file.name);\n\n    // Prepare metadata to send to backend\n    const fileMetadata = {\n      filename: file.name,\n      type: fileType\n      // You might need to send the actual file data here using FormData\n      // For this example, we're just sending metadata. Your backend needs to handle actual file upload.\n    };\n    try {\n      // Assuming backend has an endpoint for initial upload and PII detection\n      const response = await fetch(`${API_BASE_URL}/partners/${selectedPartner.id}/upload_and_analyze_file`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(fileMetadata)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n      }\n      const {\n        fileId,\n        detectedPii\n      } = await response.json(); // Backend returns fileId and detected PII\n\n      // Store data for review modal\n      setReviewData(detectedPii);\n      setCurrentFileBeingReviewed({\n        id: fileId,\n        filename: file.name,\n        type: fileType,\n        state: 'Pending Review',\n        // Set to pending review\n        downloadLink: '#',\n        // Placeholder, backend would provide\n        detectedPii: detectedPii // Store original detectedPii for reference\n      });\n      setIsReviewModalOpen(true); // Open the review modal\n    } catch (err) {\n      console.error(\"Failed to upload and analyze file:\", err);\n      alert(`Error uploading and analyzing file: ${err.message}`);\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n\n  //Handle proceeding with anonymization after human review\n  const handleProceedAnonymization = async updatedDetectedPii => {\n    setIsReviewModalOpen(false); // Close review modal\n    setIsAnalyzing(true); // Show analyzing for actual anonymization\n\n    // Prepare data for backend: send the file ID and the reviewed PII data\n    const anonymizationData = {\n      fileId: currentFileBeingReviewed.id,\n      reviewedPii: updatedDetectedPii,\n      partnerId: selectedPartnerId // Send partnerId for backend context\n    };\n    try {\n      // Assuming backend has an endpoint to finalize anonymization\n      const response = await fetch(`${API_BASE_URL}/files/${currentFileBeingReviewed.id}/anonymize`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(anonymizationData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n      }\n\n      // Backend should return the updated file object (with state: 'Anonymized' and auditLog)\n      const {\n        message,\n        updatedFile\n      } = await response.json();\n\n      // Re-fetch all partners to update the UI with the anonymized file and its audit log\n      await fetchPartners();\n      alert(message || `${currentFileBeingReviewed.filename} has been anonymized!`);\n      setReviewData(null); // Clear review data\n      setCurrentFileBeingReviewed(null); // Clear current file being reviewed\n    } catch (err) {\n      console.error(\"Failed to proceed with anonymization:\", err);\n      alert(`Error anonymizing file: ${err.message}`);\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n\n  // Handle toggling file anonymization state (De-anonymize/Anonymize)\n  const handleToggleFileAnonymization = async (partnerId, fileId) => {\n    const partnerToUpdate = partners.find(p => p.id === partnerId);\n    const fileToToggle = partnerToUpdate === null || partnerToUpdate === void 0 ? void 0 : partnerToUpdate.files.find(f => f.id === fileId);\n    if (!fileToToggle) return;\n    const newState = fileToToggle.state === 'Anonymized' ? 'De-anonymized' : 'Anonymized';\n    try {\n      const response = await fetch(`${API_BASE_URL}/files/${fileId}/state`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          state: newState\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n      }\n      await fetchPartners(); // Re-fetch partners to ensure UI is in sync\n      alert(`File state updated to ${newState} for ${fileToToggle.filename}.`);\n    } catch (err) {\n      console.error(\"Failed to toggle file anonymization:\", err);\n      alert(`Error toggling anonymization: ${err.message}`);\n    }\n  };\n\n  //Handle cancelling the review process\n  const handleCancelReview = () => {\n    setIsReviewModalOpen(false);\n    setReviewData(null);\n    setCurrentFileBeingReviewed(null);\n    alert('Review cancelled. File not anonymized.');\n  };\n\n  // Handle viewing the audit log for a file\n  const handleViewAuditLog = async file => {\n    if (!file.id) {\n      alert('Cannot view audit log: File ID is missing.');\n      return;\n    }\n    try {\n      // Assuming backend has an endpoint to get audit log for a file\n      const response = await fetch(`${API_BASE_URL}/files/${file.id}/auditlog`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n      }\n      const auditData = await response.json();\n      setAuditLogData({\n        filename: file.filename,\n        // Use filename from current file object\n        fileType: file.type,\n        // Use fileType from current file object\n        ...auditData // Merge backend audit data (intendedFor, anonymizedMethod, detectedEntitiesSummary)\n      });\n      setIsAuditLogModalOpen(true);\n    } catch (err) {\n      console.error(\"Failed to fetch audit log:\", err);\n      alert(`Audit log not available for this file: ${err.message}`);\n    }\n  };\n\n  // Handle closing the audit log modal\n  const handleCloseAuditLog = () => {\n    setIsAuditLogModalOpen(false);\n    setAuditLogData(null);\n  };\n\n  // --- Initial Loading State for Partners ---\n  if (loadingPartners) {\n    return /*#__PURE__*/_jsxDEV(LoadingOverlay, {\n      message: \"Loading partners...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 12\n    }, this);\n  }\n\n  // --- Error State for Partners ---\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container error-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchPartners,\n        className: \"retry-button\",\n        children: \"Retry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(Sidenav, {\n      partners: partners,\n      selectedPartnerId: selectedPartnerId,\n      onSelectPartner: setSelectedPartnerId,\n      onAddPartnerClick: () => setIsAddPartnerModalOpen(true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: selectedPartner ? /*#__PURE__*/_jsxDEV(PartnerDetails, {\n        partner: selectedPartner,\n        onFileUpload: handleFileUpload,\n        onToggleFileAnonymization: handleToggleFileAnonymization,\n        onViewAuditLog: handleViewAuditLog\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-partner-selected\",\n        children: partners.length === 0 ? \"No partners found. Add a new partner to begin!\" : \"Select a partner to view details.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this), isAddPartnerModalOpen && /*#__PURE__*/_jsxDEV(AddPartner, {\n      onClose: () => setIsAddPartnerModalOpen(false),\n      onCreatePartner: handleAddPartner\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 9\n    }, this), isReviewModalOpen && currentFileBeingReviewed && /*#__PURE__*/_jsxDEV(Review, {\n      fileName: currentFileBeingReviewed.filename,\n      fileType: currentFileBeingReviewed.type,\n      detectedPii: reviewData,\n      onProceed: handleProceedAnonymization,\n      onCancel: handleCancelReview\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 9\n    }, this), isAuditLogModalOpen && auditLogData && /*#__PURE__*/_jsxDEV(AuditLog, {\n      auditData: auditLogData,\n      onClose: handleCloseAuditLog\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 9\n    }, this), isAnalyzing && /*#__PURE__*/_jsxDEV(LoadingOverlay, {\n      message: \"Processing...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 285,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"7HPFkFwFCZTlMNVHqI/grkYwMeM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","v4","uuidv4","Sidenav","PartnerDetails","AddPartner","LoadingOverlay","Review","AuditLog","jsxDEV","_jsxDEV","API_BASE_URL","App","_s","partners","setPartners","selectedPartnerId","setSelectedPartnerId","isAddPartnerModalOpen","setIsAddPartnerModalOpen","isAnalyzing","setIsAnalyzing","loadingPartners","setLoadingPartners","error","setError","isReviewModalOpen","setIsReviewModalOpen","reviewData","setReviewData","currentFileBeingReviewed","setCurrentFileBeingReviewed","isAuditLogModalOpen","setIsAuditLogModalOpen","auditLogData","setAuditLogData","getFileTypeFromExtension","filename","ext","split","pop","toLowerCase","includes","fetchPartners","response","fetch","ok","Error","status","data","json","length","id","some","p","err","console","selectedPartner","find","handleAddPartner","newPartnerData","method","headers","body","JSON","stringify","errorData","addedPartner","alert","name","message","handleFileUpload","filesToUpload","file","fileType","fileMetadata","type","fileId","detectedPii","state","downloadLink","handleProceedAnonymization","updatedDetectedPii","anonymizationData","reviewedPii","partnerId","updatedFile","handleToggleFileAnonymization","partnerToUpdate","fileToToggle","files","f","newState","handleCancelReview","handleViewAuditLog","auditData","handleCloseAuditLog","fileName","_jsxFileName","lineNumber","columnNumber","className","children","onClick","onSelectPartner","onAddPartnerClick","partner","onFileUpload","onToggleFileAnonymization","onViewAuditLog","onClose","onCreatePartner","onProceed","onCancel","_c","$RefreshReg$"],"sources":["/home/wwan-ab-/Desktop/AmbankHack/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport Sidenav from './Components/Sidenav/Sidenav';\nimport PartnerDetails from './Components/Partner/PartnerDetails';\nimport AddPartner from './Components/Partner/AddPartner';\nimport LoadingOverlay from './Components/Common/LoadingOverlay';\nimport Review from './Components/Review/Review';\nimport AuditLog from './Components/AuditLog/AuditLog';\nimport './App.css';\n\n// Define your backend API base URL\nconst API_BASE_URL = 'http://localhost:5000/api';\n\nfunction App() {\n  //Partners state - will be fetched from backend\n  const [partners, setPartners] = useState([]);\n  const [selectedPartnerId, setSelectedPartnerId] = useState(null);\n  const [isAddPartnerModalOpen, setIsAddPartnerModalOpen] = useState(false);\n\n  //Loading Screen Indicator\n  const [isAnalyzing, setIsAnalyzing] = useState(false); // For file upload/anonymization process\n  const [loadingPartners, setLoadingPartners] = useState(true); // For initial partners fetch\n  const [error, setError] = useState(null); // For general fetch errors\n\n  // Human Review\n  const [isReviewModalOpen, setIsReviewModalOpen] = useState(false);\n  const [reviewData, setReviewData] = useState(null); // Detected PII for review\n  const [currentFileBeingReviewed, setCurrentFileBeingReviewed] = useState(null); // The file object currently in review\n\n  // Audit\n  const [isAuditLogModalOpen, setIsAuditLogModalOpen] = useState(false);\n  const [auditLogData, setAuditLogData] = useState(null); // Audit log data for display\n\n  // Helper function to determine file type based on extension (still useful for sending to backend)\n  const getFileTypeFromExtension = (filename) => {\n    const ext = filename.split('.').pop().toLowerCase();\n    if (['txt'].includes(ext)) {\n      return 'Text file';\n    } else if (['jpg', 'jpeg', 'png', 'bmp'].includes(ext)) {\n      return 'Image file';\n    } else if (['csv', 'xlsx', 'xlsm', 'xls'].includes(ext)) {\n      return 'Tabular file';\n    } else if (['doc', 'docx', 'pdf'].includes(ext)) {\n      return 'Document file';\n    }\n    return 'Unknown file';\n  };\n\n  // Function to fetch partners from the backend\n  const fetchPartners = useCallback(async () => {\n    setLoadingPartners(true);\n    setError(null);\n    try {\n      const response = await fetch(`${API_BASE_URL}/partners`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setPartners(data);\n      // If no partner is selected, and there are partners, select the first one\n      if (!selectedPartnerId && data.length > 0) {\n        setSelectedPartnerId(data[0].id);\n      } else if (selectedPartnerId && !data.some(p => p.id === selectedPartnerId)) {\n        // If previously selected partner was removed, clear selection or select new first\n        setSelectedPartnerId(data.length > 0 ? data[0].id : null);\n      }\n    } catch (err) {\n      console.error(\"Failed to fetch partners:\", err);\n      setError(\"Failed to load partners. Please ensure the backend is running and accessible.\");\n    } finally {\n      setLoadingPartners(false);\n    }\n  }, [selectedPartnerId]); // Dependency on selectedPartnerId to re-fetch if it changes outside this component\n\n  // Initial data fetch on component mount\n  useEffect(() => {\n    fetchPartners();\n  }, [fetchPartners]); // `fetchPartners` is in dependency array because it's a useCallback\n\n  const selectedPartner = partners.find(p => p.id === selectedPartnerId);\n\n  // Handle adding a new partner via backend API\n  const handleAddPartner = async (newPartnerData) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/partners`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(newPartnerData),\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n      }\n      const addedPartner = await response.json();\n      await fetchPartners(); // Re-fetch all partners to update UI\n      setIsAddPartnerModalOpen(false);\n      setSelectedPartnerId(addedPartner.id); // Select the newly added partner\n      alert(`Partner \"${addedPartner.name}\" added successfully!`);\n    } catch (err) {\n      console.error(\"Failed to add partner:\", err);\n      alert(`Error adding partner: ${err.message}`);\n    }\n  };\n\n  // Handle file upload and initial PII analysis via backend API\n  const handleFileUpload = async (filesToUpload) => {\n    if (!selectedPartner) return;\n\n    setIsAnalyzing(true); // Show analyzing overlay\n\n    // For simplicity, we'll only process the first file if multiple are selected.\n    // In a real app, you might iterate or queue them.\n    const file = filesToUpload[0];\n    const fileType = getFileTypeFromExtension(file.name);\n\n    // Prepare metadata to send to backend\n    const fileMetadata = {\n      filename: file.name,\n      type: fileType,\n      // You might need to send the actual file data here using FormData\n      // For this example, we're just sending metadata. Your backend needs to handle actual file upload.\n    };\n\n    try {\n      // Assuming backend has an endpoint for initial upload and PII detection\n      const response = await fetch(`${API_BASE_URL}/partners/${selectedPartner.id}/upload_and_analyze_file`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(fileMetadata),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n      }\n\n      const { fileId, detectedPii } = await response.json(); // Backend returns fileId and detected PII\n\n      // Store data for review modal\n      setReviewData(detectedPii);\n      setCurrentFileBeingReviewed({\n        id: fileId,\n        filename: file.name,\n        type: fileType,\n        state: 'Pending Review', // Set to pending review\n        downloadLink: '#', // Placeholder, backend would provide\n        detectedPii: detectedPii, // Store original detectedPii for reference\n      });\n      setIsReviewModalOpen(true); // Open the review modal\n\n    } catch (err) {\n      console.error(\"Failed to upload and analyze file:\", err);\n      alert(`Error uploading and analyzing file: ${err.message}`);\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n\n  //Handle proceeding with anonymization after human review\n  const handleProceedAnonymization = async (updatedDetectedPii) => {\n    setIsReviewModalOpen(false); // Close review modal\n    setIsAnalyzing(true); // Show analyzing for actual anonymization\n\n    // Prepare data for backend: send the file ID and the reviewed PII data\n    const anonymizationData = {\n      fileId: currentFileBeingReviewed.id,\n      reviewedPii: updatedDetectedPii,\n      partnerId: selectedPartnerId, // Send partnerId for backend context\n    };\n\n    try {\n      // Assuming backend has an endpoint to finalize anonymization\n      const response = await fetch(`${API_BASE_URL}/files/${currentFileBeingReviewed.id}/anonymize`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(anonymizationData),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n      }\n\n      // Backend should return the updated file object (with state: 'Anonymized' and auditLog)\n      const { message, updatedFile } = await response.json();\n\n      // Re-fetch all partners to update the UI with the anonymized file and its audit log\n      await fetchPartners();\n\n      alert(message || `${currentFileBeingReviewed.filename} has been anonymized!`);\n      setReviewData(null); // Clear review data\n      setCurrentFileBeingReviewed(null); // Clear current file being reviewed\n\n    } catch (err) {\n      console.error(\"Failed to proceed with anonymization:\", err);\n      alert(`Error anonymizing file: ${err.message}`);\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n\n  // Handle toggling file anonymization state (De-anonymize/Anonymize)\n  const handleToggleFileAnonymization = async (partnerId, fileId) => {\n    const partnerToUpdate = partners.find(p => p.id === partnerId);\n    const fileToToggle = partnerToUpdate?.files.find(f => f.id === fileId);\n\n    if (!fileToToggle) return;\n\n    const newState = fileToToggle.state === 'Anonymized' ? 'De-anonymized' : 'Anonymized';\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/files/${fileId}/state`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ state: newState }),\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n      }\n      await fetchPartners(); // Re-fetch partners to ensure UI is in sync\n      alert(`File state updated to ${newState} for ${fileToToggle.filename}.`);\n    } catch (err) {\n      console.error(\"Failed to toggle file anonymization:\", err);\n      alert(`Error toggling anonymization: ${err.message}`);\n    }\n  };\n\n  //Handle cancelling the review process\n  const handleCancelReview = () => {\n    setIsReviewModalOpen(false);\n    setReviewData(null);\n    setCurrentFileBeingReviewed(null);\n    alert('Review cancelled. File not anonymized.');\n  };\n\n  // Handle viewing the audit log for a file\n  const handleViewAuditLog = async (file) => {\n    if (!file.id) {\n        alert('Cannot view audit log: File ID is missing.');\n        return;\n    }\n    try {\n        // Assuming backend has an endpoint to get audit log for a file\n        const response = await fetch(`${API_BASE_URL}/files/${file.id}/auditlog`);\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n        }\n        const auditData = await response.json();\n        setAuditLogData({\n            filename: file.filename, // Use filename from current file object\n            fileType: file.type,     // Use fileType from current file object\n            ...auditData // Merge backend audit data (intendedFor, anonymizedMethod, detectedEntitiesSummary)\n        });\n        setIsAuditLogModalOpen(true);\n    } catch (err) {\n        console.error(\"Failed to fetch audit log:\", err);\n        alert(`Audit log not available for this file: ${err.message}`);\n    }\n  };\n\n  // Handle closing the audit log modal\n  const handleCloseAuditLog = () => {\n    setIsAuditLogModalOpen(false);\n    setAuditLogData(null);\n  };\n\n  // --- Initial Loading State for Partners ---\n  if (loadingPartners) {\n    return <LoadingOverlay message=\"Loading partners...\" />;\n  }\n\n  // --- Error State for Partners ---\n  if (error) {\n    return (\n      <div className=\"app-container error-container\">\n        <p className=\"error-message\">{error}</p>\n        <button onClick={fetchPartners} className=\"retry-button\">Retry</button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"app-container\">\n      {/* Sidenav */}\n      <Sidenav\n        partners={partners}\n        selectedPartnerId={selectedPartnerId}\n        onSelectPartner={setSelectedPartnerId}\n        onAddPartnerClick={() => setIsAddPartnerModalOpen(true)}\n      />\n\n      {/* Main Content Area */}\n      <div className=\"main-content\">\n        {selectedPartner ? (\n          <PartnerDetails\n            partner={selectedPartner}\n            onFileUpload={handleFileUpload}\n            onToggleFileAnonymization={handleToggleFileAnonymization}\n            onViewAuditLog={handleViewAuditLog}\n          />\n        ) : (\n          <div className=\"no-partner-selected\">\n            {partners.length === 0 ? \"No partners found. Add a new partner to begin!\" : \"Select a partner to view details.\"}\n          </div>\n        )}\n      </div>\n\n      {/* Add Partner Modal */}\n      {isAddPartnerModalOpen && (\n        <AddPartner\n          onClose={() => setIsAddPartnerModalOpen(false)}\n          onCreatePartner={handleAddPartner}\n        />\n      )}\n\n      {/* Review Before Anonymization Modal */}\n      {isReviewModalOpen && currentFileBeingReviewed && (\n        <Review\n          fileName={currentFileBeingReviewed.filename}\n          fileType={currentFileBeingReviewed.type}\n          detectedPii={reviewData}\n          onProceed={handleProceedAnonymization}\n          onCancel={handleCancelReview}\n        />\n      )}\n\n      {/* Audit Log Modal */}\n      {isAuditLogModalOpen && auditLogData && (\n        <AuditLog\n          auditData={auditLogData}\n          onClose={handleCloseAuditLog}\n        />\n      )}\n\n      {/* Analyzing Overlay (for file upload/anonymization) */}\n      {isAnalyzing && <LoadingOverlay message=\"Processing...\" />}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}